
MENTORS = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
COURSES = ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"]

DURATIONS = [14, 20, 12, 20]

def unique_names(mentors):

    # Добавьте в список всех преподавателей со всех курсов
    all_list = []
    for m in mentors:
        # Допишите здесь ваш код, который заполнит all_list. Можете как складывать списки, так и использовать метод extend
        all_list += m

    # Сделайте список all_names_list, состоящий только из имён, и заполните его
    all_names_list = []
    for mentor in all_list:
        name = (mentor.split())[0]
        all_names_list.append(name)

    # Сделайте так, чтобы остались только уникальные имена (без повторений) - допишите ниже ваш код
    unique_names = set(all_names_list)
    # unique_names = all_names_list

    # Теперь необходимо отсортировать имена в алфавитном порядке. Подсказка: используйте sorted() для списка
    # Допишите код ниже
    all_names_sorted = sorted(list(unique_names))
    # Допишите конструкцию вывода результата. Можете использовать string.join()
    # Результат будет в all_names_sorted
    
    # print(f'Уникальные имена преподавателей: {", ".join(all_names_sorted)}')
    return all_names_sorted

def top3_names(mentors):

    # Добавьте в список всех преподавателей со всех курсов
    all_list = []
    for m in mentors:
        # Допишите здесь ваш код, который заполнит all_list. Можете как складывать списки, так и использовать метод extend
        all_list += m

    # Сделайте список all_names_list, состоящий только из имён, и заполните его
    all_names_list = []
    for mentor in all_list:
        name = (mentor.split())[0]
        all_names_list.append(name)

    # Сделайте так, чтобы остались только уникальные имена (без повторений) - допишите ниже ваш код
    unique_names = set(all_names_list)
    popular = []
    for name in unique_names:
        popular.append([name, all_names_list.count(name)]) # Добавьте подсчёт имён

    # Это код для сортировки списка с элементами вида [имя, количество] по убыванию встречаемости
    # Используйте его, как есть, или напишите собственный :)
    popular.sort(key=lambda x:x[0], reverse=False)
    popular.sort(key=lambda x:x[1], reverse=True)
    # Получите топ-3 часто встречающихся имён из списка popular
    # Подсказка: возьмите срез списка
    top_3 = []
    for name in popular[:3]:
        top_3.append(name[0])

    return top_3

def duration_courses(courses, durations):

    # Наводим порядок: упорядочиваем курсы по продолжительности

    courses_list = []
    for course, duration in zip(courses, durations):
        course_dict = {"title":course, "duration":duration}
        courses_list.append(course_dict)

    # С этого момента начинается выполнение задания 2
    # На входе у вас есть только список курсов courses_list. Об исходных данных, на базе которых он был сделан, вы ничего не знаете

    # Отсортируйте курсы по длительности (ключ duration), но при этом сохраните порядковый номер каждого курса из courses_list
    # Самое простое — создать новый словарь durations_dict с ключом — duration и значением — исходным номером курса в courses_list
    # Но у нас могут быть курсы с одинаковой длительностью, поэтому значение словаря — это список индексов, а не одно значение
    durations_dict = {}

    # Допишите код цикла так, чтобы в нём вы получали id курса. Подсказка: помните о функции enumerate
    for id, course in enumerate(courses_list):
        key = course.get("duration") # Получите значение из ключа duration
        # Допишите код ниже, который добавляет в словарь durations_dict по ключу key значения — id
        durations_dict.setdefault(key, [])
        durations_dict[key].append(id)

    # Отсортируем словарь по ключам. Этот код уже готов, ничего менять не нужно
    # Здесь мы получаем пары ключ-значение в виде кортежа, и функция sorted выполняет сортировку по первым значениям кортежа — ключам
    durations_dict = dict(sorted(durations_dict.items()))
    return durations_dict
    # Выведите курсы, отсортированные по длительности
    # Допишите код цикла так, чтобы в нём вы получали из durations_dict ключи и значения
    # for duration, id in durations_dict.items():
    #     # Допишите код, который проходит по всему списку значений и выводит на экран текст вида «название курса — длительность»
    #     for i in id:
    #         print(f'{courses_list[i]["title"]} - {duration} месяцев')


# print(unique_names(MENTORS))
# print(top3_names(MENTORS))
# print(duration_courses(COURSES, DURATIONS))